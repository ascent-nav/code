# @package _global_

# Copyright (c) 2023 Boston Dynamics AI Institute LLC. All rights reserved.

defaults:
  - /benchmark/nav/socialnav_v2: falcon_depth_hm3d
  - /habitat_baselines: habitat_baselines_rl_config_base
  # - /habitat_baselines/rl/policy/obs_transforms:
  #   - resize
  - /habitat_baselines/rl/policy/obs_transforms@habitat_baselines.rl.policy.agent_0.obs_transforms.resize: resize
  - _self_

habitat_baselines:
  verbose: False
  trainer_name: "ddppo"
  torch_gpu_id: 0
  tensorboard_dir: "debug/20241102/tb"
  video_dir: "debug/20241102/video_dir"
  test_episode_count: -1
  eval_ckpt_path_dir: "debug/20241102/checkpoints"
  num_environments: 80
  checkpoint_folder: "debug/20241102/checkpoints"
  num_updates: -1
  total_num_steps: 1.0e8 # 2.5e9
  log_interval: 10
  num_checkpoints: 200 # 100
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True

  rl:
    policy:
      agent_0:
        name: "PointNavResNetPolicy"
        # obs_transforms:
        #   resize:
        #     type: Resize
        #     size: [224, 224]
        #     channels_last: true
        #     trans_keys: ["rgb", "depth", "semantic"]
        #     semantic_key: "semantic"

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet18
      rnn_type: LSTM
      num_recurrent_layers: 2

habitat:
  tasks:
    measurements:
      multi_agent_nav_reward:
        type: MultiAgentNavReward
        use_geo_distance: true
        allow_distance: 2.0
        collide_scene_penalty: -0.005
        collide_human_penalty: -0.015
        close_to_human_penalty: -0.003
        trajectory_cover_penalty: -0.0005
        cover_future_dis_thre: 0.05 
        robot_idx: 0
        facing_human_dis: 2.0