# @package _global_

# Copyright (c) 2023 Boston Dynamics AI Institute LLC. All rights reserved.

defaults:
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /benchmark/nav/objectnav: rednet_objectnav_hm3d_debug
  - /habitat/task/lab_sensors:
      - base_explorer
      - compass_sensor
      - gps_sensor
      - heading_sensor
      - frontier_sensor
  - /habitat/task/measurements:
    - multi_floor_map # frontier_exploration_map
    - traveled_stairs
  - /habitat_baselines/rl/policy: main_agent_vlfm_policy # vlfm_policy
  - _self_

habitat:
  environment:
    iterator_options:
      max_scene_repeat_steps: 50000
  task:
    success_reward: 2.5
    slack_reward: -1e-3
    lab_sensors:
      base_explorer:
        turn_angle: 30
        area_thresh: 3.0 # -1 # default 3.0

habitat_baselines:
  evaluate: True
  eval_ckpt_path_dir: data/dummy_policy.pth
  num_environments: 1
  load_resume_state_config: False
  verbose: false
  torch_gpu_id: 0
  tensorboard_dir: "debug/20250121/tb_all"
  video_dir: "debug/20250121/video_all"
  test_episode_count: -1
  checkpoint_folder: "debug/20241205/"
  trainer_name: "vlfm"
  num_updates: 270000
  log_interval: 10
  num_checkpoints: 100
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval_keys_to_include_in_name: ["success","num_steps"]
  eval:
    split: "val"
    # video_option: ["disk"]
    extra_sim_sensors:
      third_rgb_sensor:
        height: 480
        width: 640
        position:
        - 0.0
        - 1.8
        - 0.5 # 0.0 - is back
        orientation:
        - -0.78 # -1.57 # 0.0
        - 0.0 # right -1.57
        - 0.0 #lay -1.57 
  rl:
    policy:
      main_agent:
        name: "HabitatITMPolicy_World" # "HabitatITMPolicyV2"
        action_distribution_type: categorical
        obstacle_map_area_threshold: 1.5 # default 1.5 # -1 
        pointnav_policy_path: "data/pretrained_models/pointnav_weights.pth" # "data/pretrained_models/pretrained_hm3d_habitat3_v2.pth" # 换用hm3d pretrained
    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512
    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether or not the visual encoder backbone will be trained.
      train_encoder: True
      # Whether or not to reset the critic linear layer
      reset_critic: False

      # Model parameters
      backbone: resnet50
      rnn_type: LSTM
      num_recurrent_layers: 2
